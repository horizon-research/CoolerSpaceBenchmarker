import numpy as np
import cupy as cp

RGB2XYZ = np.asarray([
    [
        0.4124564,
        0.2126729,
        0.0193339
    ],
    [
        0.3575761,
        0.7151522,
        0.119192
    ],
    [
        0.1804375,
        0.072175,
        0.9503041
    ]
])

XYZ2LMS = np.asarray([
    [
        0.210576,
        -0.417076,
        0
    ],
    [
        0.855098,
        1.17726,
        0
    ],
    [
        -0.0396983,
        0.0786283,
        0.516835
    ]
])

Light2LMS = np.asarray([
    [
        0.000415003,
        0.000368349,
        0.00954729
    ],
    [
        0.00105192,
        0.000958658,
        0.023825
    ],
    [
        0.00240836,
        0.00226991,
        0.0566498
    ],
    [
        0.00483339,
        0.0047001,
        0.122451
    ],
    [
        0.00872127,
        0.00879369,
        0.233008
    ],
    [
        0.0133837,
        0.0145277,
        0.381363
    ],
    [
        0.018448,
        0.0216649,
        0.543618
    ],
    [
        0.0229317,
        0.0295714,
        0.674474
    ],
    [
        0.0281877,
        0.0394566,
        0.802555
    ],
    [
        0.0341054,
        0.0518199,
        0.903573
    ],
    [
        0.0402563,
        0.0647782,
        0.99102
    ],
    [
        0.044938,
        0.0758812,
        0.991515
    ],
    [
        0.0498639,
        0.0870524,
        0.955393
    ],
    [
        0.0553418,
        0.0981934,
        0.86024
    ],
    [
        0.0647164,
        0.116272,
        0.786704
    ],
    [
        0.0806894,
        0.144541,
        0.738268
    ],
    [
        0.0994755,
        0.175893,
        0.646359
    ],
    [
        0.118802,
        0.205398,
        0.516411
    ],
    [
        0.140145,
        0.235754,
        0.390333
    ],
    [
        0.163952,
        0.268063,
        0.290322
    ],
    [
        0.191556,
        0.30363,
        0.211867
    ],
    [
        0.232926,
        0.357061,
        0.160526
    ],
    [
        0.288959,
        0.427764,
        0.122839
    ],
    [
        0.359716,
        0.515587,
        0.0888965
    ],
    [
        0.443683,
        0.61552,
        0.060821
    ],
    [
        0.536494,
        0.719154,
        0.0428123
    ],
    [
        0.628561,
        0.81661,
        0.0292033
    ],
    [
        0.70472,
        0.88555,
        0.0193912
    ],
    [
        0.77063,
        0.935687,
        0.0126013
    ],
    [
        0.825711,
        0.968858,
        0.00809453
    ],
    [
        0.881011,
        0.995217,
        0.005089
    ],
    [
        0.919067,
        0.997193,
        0.00316893
    ],
    [
        0.940198,
        0.977193,
        0.00195896
    ],
    [
        0.965733,
        0.956583,
        0.00120277
    ],
    [
        0.981445,
        0.91775,
        0.000740174
    ],
    [
        0.994486,
        0.873205,
        0.000455979
    ],
    [
        0.999993,
        0.813509,
        0.0002818
    ],
    [
        0.99231,
        0.740291,
        0.000175039
    ],
    [
        0.969429,
        0.653274,
        0.000109454
    ],
    [
        0.955602,
        0.572597,
        0.0000689991
    ],
    [
        0.927673,
        0.492599,
        0.0000439024
    ],
    [
        0.885969,
        0.411246,
        0.0000282228
    ],
    [
        0.833982,
        0.334429,
        0.0000183459
    ],
    [
        0.775103,
        0.264872,
        0.0000120667
    ],
    [
        0.705713,
        0.205273,
        0.00000803488
    ],
    [
        0.630773,
        0.156243,
        0.00000541843
    ],
    [
        0.554224,
        0.116641,
        0
    ],
    [
        0.479941,
        0.0855872,
        0
    ],
    [
        0.400711,
        0.062112,
        0
    ],
    [
        0.327864,
        0.0444879,
        0
    ],
    [
        0.265784,
        0.0314282,
        0
    ],
    [
        0.213284,
        0.0218037,
        0
    ],
    [
        0.165141,
        0.015448,
        0
    ],
    [
        0.124749,
        0.010712,
        0
    ],
    [
        0.0930085,
        0.00730255,
        0
    ],
    [
        0.06851,
        0.00497179,
        0
    ],
    [
        0.0498661,
        0.00343667,
        0
    ],
    [
        0.0358233,
        0.00237617,
        0
    ],
    [
        0.025379,
        0.00163734,
        0
    ],
    [
        0.0177201,
        0.00112128,
        0
    ],
    [
        0.0121701,
        0.000761051,
        0
    ],
    [
        0.0084717,
        0.000525457,
        0
    ],
    [
        0.00589749,
        0.000365317,
        0
    ],
    [
        0.00409129,
        0.000253417,
        0
    ],
    [
        0.00280447,
        0.000174402,
        0
    ],
    [
        0.00192058,
        0.000120608,
        0
    ],
    [
        0.00132687,
        0.0000841716,
        0
    ],
    [
        0.000917777,
        0.0000589349,
        0
    ],
    [
        0.000639373,
        0.0000416049,
        0
    ],
    [
        0.000446035,
        0.0000294354,
        0
    ],
    [
        0.000310869,
        0.000020886,
        0
    ],
    [
        0.000219329,
        0.0000150458,
        0
    ],
    [
        0.000154549,
        0.00001082,
        0
    ],
    [
        0.000109508,
        0.00000782271,
        0
    ],
    [
        0.0000779912,
        0.00000569093,
        0
    ],
    [
        0.0000556264,
        0.00000413998,
        0
    ],
    [
        0.0000399295,
        0.00000302683,
        0
    ],
    [
        0.0000286163,
        0.000002211,
        0
    ],
    [
        0.0000207321,
        0.00000163433,
        0
    ],
    [
        0.0000150432,
        0.00000121054,
        0
    ],
    [
        0.0000109446,
        8.9917e-7,
        0
    ],
    [
        0.0000079775,
        6.69594e-7,
        0
    ],
    [
        0.00000585057,
        5.03187e-7,
        0
    ],
    [
        0.00000431102,
        3.80046e-7,
        0
    ],
    [
        0.00000317009,
        2.86329e-7,
        0
    ],
    [
        0.00000234468,
        2.16878e-7,
        0
    ],
    [
        0.00000174666,
        1.65158e-7,
        0
    ],
    [
        0.00000130241,
        1.25508e-7,
        0
    ],
    [
        9.74306e-7,
        9.53411e-8,
        0
    ]
])

project = np.asarray([
    [1.0],
    [1.0],
    [1.0]
])

identity = np.asarray([
    [1.0, 0., 0.],
    [0., 1., 0.],
    [0., 0., 1.]
])

LMS2XYZ = np.asarray([
    [
        1.94735469,
        0.68990272,
        0
    ],
    [
        -1.41445123,
        0.34832189,
        0
    ],
    [
        0.36476327,
        0,
        1.93485343
    ]
])

XYZ2RGB = np.asarray([
    [
        3.2404542,
        -0.969266,
        0.0556434
    ],
    [
        -1.5371385,
        1.8760108,
        -0.2040259
    ],
    [
        -0.4985314,
        0.041556,
        1.0572252
    ]
])


def adapt(original_image: np.ndarray, original_illuminant: np.ndarray, target_illuminant: np.ndarray):
    # Move to GPU
    original_image = cp.asarray(original_image)
    original_illuminant = cp.asarray(original_illuminant)
    target_illuminant = cp.asarray(target_illuminant)

    original_shape = original_image.shape
    original_image = original_image.reshape((-1, 3))

    # Convert to linear RGB space
    original_image_linear = (original_image / 255) ** 2.2

    # Convert image to LMS space
    original_image_lms = (original_image_linear @ cp.asarray(RGB2XYZ)) @ cp.asarray(XYZ2LMS)

    # Calculating factor to adjust lms cones by
    original_illuminant_lms = original_illuminant @ cp.asarray(Light2LMS)
    target_illuminant_lms = target_illuminant @ cp.asarray(Light2LMS)
    factor = (target_illuminant_lms / original_illuminant_lms).reshape((1, 3))
    factor_projected = cp.asarray(project) @ factor
    vk_matrix = factor_projected * cp.asarray(identity)

    # Modulate image
    new_image_lms = original_image_lms @ vk_matrix

    # Translate back to sRGB space
    new_image_linear = (new_image_lms @ cp.asarray(LMS2XYZ)) @ cp.asarray(XYZ2RGB)
    new_image_sRGB = (new_image_linear ** 0.45454545454545453) * 255

    return cp.asnumpy(new_image_sRGB.reshape(original_shape))
